// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "Timer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Timer::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Timer::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Timer::ap_ST_st1_fsm_0 = "1";
const sc_lv<4> Timer::ap_ST_st2_fsm_1 = "10";
const sc_lv<4> Timer::ap_ST_st3_fsm_2 = "100";
const sc_lv<4> Timer::ap_ST_st4_fsm_3 = "1000";
const sc_lv<32> Timer::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Timer::ap_const_lv1_1 = "1";
const sc_lv<1> Timer::ap_const_lv1_0 = "0";
const sc_lv<32> Timer::ap_const_lv32_1 = "1";
const sc_lv<32> Timer::ap_const_lv32_2 = "10";
const sc_lv<32> Timer::ap_const_lv32_3 = "11";
const sc_lv<32> Timer::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";

Timer::Timer(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( state_load_reg_220 );
    sensitive << ( tmp_5_reg_229 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( grp_read_fu_66_p2 );
    sensitive << ( tmp_7_fu_172_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( state_load_reg_220 );
    sensitive << ( tmp_5_reg_229 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( grp_read_fu_66_p2 );
    sensitive << ( tmp_7_fu_172_p2 );

    SC_METHOD(thread_ap_sig_bdd_105);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_65);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_20 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_105 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_47 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_bdd_65 );

    SC_METHOD(thread_grp_read_fu_66_p2);
    sensitive << ( PPS );
    sensitive << ( state_load_reg_220 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_pps_edge);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_pps_edge_ap_vld);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_state_load_load_fu_130_p1);
    sensitive << ( state );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_tmp_4_fu_141_p2);
    sensitive << ( hop_rate_assign_fu_52 );

    SC_METHOD(thread_tmp_5_fu_147_p2);
    sensitive << ( trigger_count );
    sensitive << ( state_load_load_fu_130_p1 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_4_fu_141_p2 );

    SC_METHOD(thread_tmp_7_fu_172_p2);
    sensitive << ( ticks );
    sensitive << ( state_load_reg_220 );
    sensitive << ( tmp_5_reg_229 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( num_clks_assign_fu_48 );

    SC_METHOD(thread_tmp_8_fu_190_p2);
    sensitive << ( trigger_count_load_reg_224 );

    SC_METHOD(thread_tmp_9_fu_178_p2);
    sensitive << ( ticks );

    SC_METHOD(thread_trigger_out);
    sensitive << ( state_load_reg_220 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_5_reg_229 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_7_fu_172_p2 );

    SC_METHOD(thread_trigger_out_ap_vld);
    sensitive << ( state_load_reg_220 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_5_reg_229 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_7_fu_172_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( state_load_reg_220 );
    sensitive << ( tmp_5_reg_229 );
    sensitive << ( grp_read_fu_66_p2 );
    sensitive << ( tmp_7_fu_172_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    state = "0";
    ticks = "00000000000000000000000000000001";
    trigger_count = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Timer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, PPS, "(port)PPS");
    sc_trace(mVcdFile, pps_en, "(port)pps_en");
    sc_trace(mVcdFile, num_clks, "(port)num_clks");
    sc_trace(mVcdFile, hop_rate, "(port)hop_rate");
    sc_trace(mVcdFile, trigger_out, "(port)trigger_out");
    sc_trace(mVcdFile, trigger_out_ap_vld, "(port)trigger_out_ap_vld");
    sc_trace(mVcdFile, pps_edge, "(port)pps_edge");
    sc_trace(mVcdFile, pps_edge_ap_vld, "(port)pps_edge_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_20, "ap_sig_bdd_20");
    sc_trace(mVcdFile, state, "state");
    sc_trace(mVcdFile, ticks, "ticks");
    sc_trace(mVcdFile, trigger_count, "trigger_count");
    sc_trace(mVcdFile, state_load_load_fu_130_p1, "state_load_load_fu_130_p1");
    sc_trace(mVcdFile, state_load_reg_220, "state_load_reg_220");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_47, "ap_sig_bdd_47");
    sc_trace(mVcdFile, trigger_count_load_reg_224, "trigger_count_load_reg_224");
    sc_trace(mVcdFile, tmp_5_fu_147_p2, "tmp_5_fu_147_p2");
    sc_trace(mVcdFile, tmp_5_reg_229, "tmp_5_reg_229");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_bdd_65, "ap_sig_bdd_65");
    sc_trace(mVcdFile, grp_read_fu_66_p2, "grp_read_fu_66_p2");
    sc_trace(mVcdFile, tmp_9_fu_178_p2, "tmp_9_fu_178_p2");
    sc_trace(mVcdFile, tmp_7_fu_172_p2, "tmp_7_fu_172_p2");
    sc_trace(mVcdFile, tmp_8_fu_190_p2, "tmp_8_fu_190_p2");
    sc_trace(mVcdFile, num_clks_assign_fu_48, "num_clks_assign_fu_48");
    sc_trace(mVcdFile, hop_rate_assign_fu_52, "hop_rate_assign_fu_52");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_105, "ap_sig_bdd_105");
    sc_trace(mVcdFile, tmp_4_fu_141_p2, "tmp_4_fu_141_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("Timer.hdltvin.dat");
    mHdltvoutHandle.open("Timer.hdltvout.dat");
}

Timer::~Timer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void Timer::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        state = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, state_load_reg_220.read()) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, grp_read_fu_66_p2.read()))) {
            state = ap_const_lv1_1;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                    !esl_seteq<1,1,1>(ap_const_lv1_0, state_load_load_fu_130_p1.read()) && 
                    !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_147_p2.read()))) {
            state = ap_const_lv1_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ticks = ap_const_lv32_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, state_load_reg_220.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_229.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_172_p2.read()))) {
            ticks = tmp_9_fu_178_p2.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                    !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            ticks = ap_const_lv32_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        trigger_count = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, state_load_reg_220.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_229.read()) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_172_p2.read()))) {
            trigger_count = tmp_8_fu_190_p2.read();
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, state_load_load_fu_130_p1.read()) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_147_p2.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, state_load_load_fu_130_p1.read())))) {
            trigger_count = ap_const_lv32_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        hop_rate_assign_fu_52 = hop_rate.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        num_clks_assign_fu_48 = num_clks.read();
        state_load_reg_220 = state.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, state_load_load_fu_130_p1.read()))) {
        tmp_5_reg_229 = tmp_5_fu_147_p2.read();
        trigger_count_load_reg_224 = trigger_count.read();
    }
}

void Timer::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         ((esl_seteq<1,1,1>(ap_const_lv1_0, state_load_reg_220.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, grp_read_fu_66_p2.read())) || 
          (!esl_seteq<1,1,1>(ap_const_lv1_0, state_load_reg_220.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_229.read())) || 
          (!esl_seteq<1,1,1>(ap_const_lv1_0, state_load_reg_220.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_172_p2.read()))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Timer::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Timer::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         ((esl_seteq<1,1,1>(ap_const_lv1_0, state_load_reg_220.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, grp_read_fu_66_p2.read())) || 
          (!esl_seteq<1,1,1>(ap_const_lv1_0, state_load_reg_220.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_229.read())) || 
          (!esl_seteq<1,1,1>(ap_const_lv1_0, state_load_reg_220.read()) && 
           !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_172_p2.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Timer::thread_ap_sig_bdd_105() {
    ap_sig_bdd_105 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void Timer::thread_ap_sig_bdd_20() {
    ap_sig_bdd_20 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void Timer::thread_ap_sig_bdd_47() {
    ap_sig_bdd_47 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void Timer::thread_ap_sig_bdd_65() {
    ap_sig_bdd_65 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void Timer::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_20.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void Timer::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_105.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void Timer::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_47.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void Timer::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_bdd_65.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void Timer::thread_grp_read_fu_66_p2() {
    grp_read_fu_66_p2 = PPS.read();
}

void Timer::thread_pps_edge() {
    pps_edge = ap_const_lv1_0;
}

void Timer::thread_pps_edge_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        pps_edge_ap_vld = ap_const_logic_1;
    } else {
        pps_edge_ap_vld = ap_const_logic_0;
    }
}

void Timer::thread_state_load_load_fu_130_p1() {
    state_load_load_fu_130_p1 = state.read();
}

void Timer::thread_tmp_4_fu_141_p2() {
    tmp_4_fu_141_p2 = (!hop_rate_assign_fu_52.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(hop_rate_assign_fu_52.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void Timer::thread_tmp_5_fu_147_p2() {
    tmp_5_fu_147_p2 = (!trigger_count.read().is_01() || !tmp_4_fu_141_p2.read().is_01())? sc_lv<1>(): sc_lv<1>(trigger_count.read() == tmp_4_fu_141_p2.read());
}

void Timer::thread_tmp_7_fu_172_p2() {
    tmp_7_fu_172_p2 = (!ticks.read().is_01() || !num_clks_assign_fu_48.read().is_01())? sc_lv<1>(): sc_lv<1>(ticks.read() == num_clks_assign_fu_48.read());
}

void Timer::thread_tmp_8_fu_190_p2() {
    tmp_8_fu_190_p2 = (!trigger_count_load_reg_224.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(trigger_count_load_reg_224.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void Timer::thread_tmp_9_fu_178_p2() {
    tmp_9_fu_178_p2 = (!ticks.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(ticks.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void Timer::thread_trigger_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, state_load_reg_220.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_229.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_172_p2.read()))) {
        trigger_out = ap_const_lv1_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        trigger_out = ap_const_lv1_0;
    } else {
        trigger_out = "X";
    }
}

void Timer::thread_trigger_out_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, state_load_reg_220.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_229.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_172_p2.read())))) {
        trigger_out_ap_vld = ap_const_logic_1;
    } else {
        trigger_out_ap_vld = ap_const_logic_0;
    }
}

void Timer::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            if (((esl_seteq<1,1,1>(ap_const_lv1_0, state_load_reg_220.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, grp_read_fu_66_p2.read())) || (!esl_seteq<1,1,1>(ap_const_lv1_0, state_load_reg_220.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_229.read())) || (!esl_seteq<1,1,1>(ap_const_lv1_0, state_load_reg_220.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_172_p2.read())))) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

void Timer::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"PPS\" :  \"" << PPS.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pps_en\" :  \"" << pps_en.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"num_clks\" :  \"" << num_clks.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"hop_rate\" :  \"" << hop_rate.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"trigger_out\" :  \"" << trigger_out.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"trigger_out_ap_vld\" :  \"" << trigger_out_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pps_edge\" :  \"" << pps_edge.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pps_edge_ap_vld\" :  \"" << pps_edge_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

