// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _Timer_HH_
#define _Timer_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Timer : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<1> > PPS;
    sc_in< sc_lv<1> > pps_en;
    sc_in< sc_lv<32> > num_clks;
    sc_in< sc_lv<32> > hop_rate;
    sc_out< sc_lv<1> > trigger_out;
    sc_out< sc_logic > trigger_out_ap_vld;
    sc_out< sc_lv<1> > pps_edge;
    sc_out< sc_logic > pps_edge_ap_vld;


    // Module declarations
    Timer(sc_module_name name);
    SC_HAS_PROCESS(Timer);

    ~Timer();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_20;
    sc_signal< sc_lv<1> > state;
    sc_signal< sc_lv<32> > ticks;
    sc_signal< sc_lv<32> > trigger_count;
    sc_signal< sc_lv<1> > state_load_load_fu_130_p1;
    sc_signal< sc_lv<1> > state_load_reg_220;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_47;
    sc_signal< sc_lv<32> > trigger_count_load_reg_224;
    sc_signal< sc_lv<1> > tmp_5_fu_147_p2;
    sc_signal< sc_lv<1> > tmp_5_reg_229;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_bdd_65;
    sc_signal< sc_lv<1> > grp_read_fu_66_p2;
    sc_signal< sc_lv<32> > tmp_9_fu_178_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_172_p2;
    sc_signal< sc_lv<32> > tmp_8_fu_190_p2;
    sc_signal< sc_lv<32> > num_clks_assign_fu_48;
    sc_signal< sc_lv<32> > hop_rate_assign_fu_52;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_105;
    sc_signal< sc_lv<32> > tmp_4_fu_141_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_st1_fsm_0;
    static const sc_lv<4> ap_ST_st2_fsm_1;
    static const sc_lv<4> ap_ST_st3_fsm_2;
    static const sc_lv<4> ap_ST_st4_fsm_3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_105();
    void thread_ap_sig_bdd_20();
    void thread_ap_sig_bdd_47();
    void thread_ap_sig_bdd_65();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_grp_read_fu_66_p2();
    void thread_pps_edge();
    void thread_pps_edge_ap_vld();
    void thread_state_load_load_fu_130_p1();
    void thread_tmp_4_fu_141_p2();
    void thread_tmp_5_fu_147_p2();
    void thread_tmp_7_fu_172_p2();
    void thread_tmp_8_fu_190_p2();
    void thread_tmp_9_fu_178_p2();
    void thread_trigger_out();
    void thread_trigger_out_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
