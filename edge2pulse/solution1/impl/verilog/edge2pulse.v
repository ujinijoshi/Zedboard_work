// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="edge2pulse,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.311000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=7,HLS_SYN_LUT=5}" *)

module edge2pulse (
        ap_clk,
        ap_rst,
        signal_r,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input  [0:0] signal_r;
output  [0:0] ap_return;

reg   [2:0] reg_V = 3'b000;
wire   [0:0] tmp_3_fu_90_p2;
reg   [0:0] tmp_3_reg_96;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
reg   [0:0] p_s_phi_fu_42_p4;
reg   [0:0] p_s_reg_38;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_31;
wire   [2:0] p_Result_s_fu_58_p3;
wire   [1:0] tmp_fu_54_p1;
wire   [0:0] tmp_2_fu_80_p1;
wire   [0:0] tmp_1_fu_72_p3;
wire   [0:0] p_Result_1_not_fu_84_p2;
reg   [1:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(tmp_3_fu_90_p2 == ap_const_lv1_0))) begin
        p_s_reg_38 <= ap_const_lv1_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_3_reg_96 == ap_const_lv1_0))) begin
        p_s_reg_38 <= ap_const_lv1_1;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        reg_V <= p_Result_s_fu_58_p3;
        tmp_3_reg_96 <= tmp_3_fu_90_p2;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21) begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_31) begin
    if (ap_sig_bdd_31) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// p_s_phi_fu_42_p4 assign process. ///
always @ (tmp_3_reg_96 or p_s_reg_38 or ap_sig_cseq_ST_st2_fsm_1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_3_reg_96 == ap_const_lv1_0))) begin
        p_s_phi_fu_42_p4 = ap_const_lv1_1;
    end else begin
        p_s_phi_fu_42_p4 = p_s_reg_38;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_return = p_s_phi_fu_42_p4;

/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_31 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_31 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign p_Result_1_not_fu_84_p2 = (tmp_2_fu_80_p1 ^ ap_const_lv1_1);
assign p_Result_s_fu_58_p3 = {{tmp_fu_54_p1}, {signal_r}};
assign tmp_1_fu_72_p3 = reg_V[ap_const_lv32_1];
assign tmp_2_fu_80_p1 = reg_V[0:0];
assign tmp_3_fu_90_p2 = (tmp_1_fu_72_p3 | p_Result_1_not_fu_84_p2);
assign tmp_fu_54_p1 = reg_V[1:0];


endmodule //edge2pulse

