// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "edge2pulse.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic edge2pulse::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic edge2pulse::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> edge2pulse::ap_ST_st1_fsm_0 = "1";
const sc_lv<2> edge2pulse::ap_ST_st2_fsm_1 = "10";
const sc_lv<32> edge2pulse::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> edge2pulse::ap_const_lv1_1 = "1";
const sc_lv<32> edge2pulse::ap_const_lv32_1 = "1";
const sc_lv<1> edge2pulse::ap_const_lv1_0 = "0";

edge2pulse::edge2pulse(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_return);
    sensitive << ( p_s_phi_fu_42_p4 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_sig_bdd_21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_21 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_31 );

    SC_METHOD(thread_p_Result_1_not_fu_84_p2);
    sensitive << ( tmp_2_fu_80_p1 );

    SC_METHOD(thread_p_Result_s_fu_58_p3);
    sensitive << ( signal_r );
    sensitive << ( tmp_fu_54_p1 );

    SC_METHOD(thread_p_s_phi_fu_42_p4);
    sensitive << ( tmp_3_reg_96 );
    sensitive << ( p_s_reg_38 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_tmp_1_fu_72_p3);
    sensitive << ( reg_V );

    SC_METHOD(thread_tmp_2_fu_80_p1);
    sensitive << ( reg_V );

    SC_METHOD(thread_tmp_3_fu_90_p2);
    sensitive << ( tmp_1_fu_72_p3 );
    sensitive << ( p_Result_1_not_fu_84_p2 );

    SC_METHOD(thread_tmp_fu_54_p1);
    sensitive << ( reg_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    reg_V = "000";
    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "edge2pulse_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, signal_r, "(port)signal_r");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, reg_V, "reg_V");
    sc_trace(mVcdFile, tmp_3_fu_90_p2, "tmp_3_fu_90_p2");
    sc_trace(mVcdFile, tmp_3_reg_96, "tmp_3_reg_96");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_21, "ap_sig_bdd_21");
    sc_trace(mVcdFile, p_s_phi_fu_42_p4, "p_s_phi_fu_42_p4");
    sc_trace(mVcdFile, p_s_reg_38, "p_s_reg_38");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_31, "ap_sig_bdd_31");
    sc_trace(mVcdFile, p_Result_s_fu_58_p3, "p_Result_s_fu_58_p3");
    sc_trace(mVcdFile, tmp_fu_54_p1, "tmp_fu_54_p1");
    sc_trace(mVcdFile, tmp_2_fu_80_p1, "tmp_2_fu_80_p1");
    sc_trace(mVcdFile, tmp_1_fu_72_p3, "tmp_1_fu_72_p3");
    sc_trace(mVcdFile, p_Result_1_not_fu_84_p2, "p_Result_1_not_fu_84_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("edge2pulse.hdltvin.dat");
    mHdltvoutHandle.open("edge2pulse.hdltvout.dat");
}

edge2pulse::~edge2pulse() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void edge2pulse::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(tmp_3_fu_90_p2.read(), ap_const_lv1_0))) {
        p_s_reg_38 = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(tmp_3_reg_96.read(), ap_const_lv1_0))) {
        p_s_reg_38 = ap_const_lv1_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        reg_V = p_Result_s_fu_58_p3.read();
        tmp_3_reg_96 = tmp_3_fu_90_p2.read();
    }
}

void edge2pulse::thread_ap_return() {
    ap_return = p_s_phi_fu_42_p4.read();
}

void edge2pulse::thread_ap_sig_bdd_21() {
    ap_sig_bdd_21 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void edge2pulse::thread_ap_sig_bdd_31() {
    ap_sig_bdd_31 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void edge2pulse::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_21.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void edge2pulse::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_31.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void edge2pulse::thread_p_Result_1_not_fu_84_p2() {
    p_Result_1_not_fu_84_p2 = (tmp_2_fu_80_p1.read() ^ ap_const_lv1_1);
}

void edge2pulse::thread_p_Result_s_fu_58_p3() {
    p_Result_s_fu_58_p3 = esl_concat<2,1>(tmp_fu_54_p1.read(), signal_r.read());
}

void edge2pulse::thread_p_s_phi_fu_42_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_96.read(), ap_const_lv1_0))) {
        p_s_phi_fu_42_p4 = ap_const_lv1_1;
    } else {
        p_s_phi_fu_42_p4 = p_s_reg_38.read();
    }
}

void edge2pulse::thread_tmp_1_fu_72_p3() {
    tmp_1_fu_72_p3 = reg_V.read().range(1, 1);
}

void edge2pulse::thread_tmp_2_fu_80_p1() {
    tmp_2_fu_80_p1 = reg_V.read().range(1-1, 0);
}

void edge2pulse::thread_tmp_3_fu_90_p2() {
    tmp_3_fu_90_p2 = (tmp_1_fu_72_p3.read() | p_Result_1_not_fu_84_p2.read());
}

void edge2pulse::thread_tmp_fu_54_p1() {
    tmp_fu_54_p1 = reg_V.read().range(2-1, 0);
}

void edge2pulse::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void edge2pulse::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"signal_r\" :  \"" << signal_r.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

